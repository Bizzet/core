
// Retina (File|FileType|Width|Height)

@mixin retina($file, $type, $width, $height) {
  background-image: url($file + '.' + $type);
 
  @media (-webkit-min-device-pixel-ratio: 2), (-moz-min-device-pixel-ratio: 2) {
    & {
      background-image: url($file + '@2x.' + $type);
      -webkit-background-size: $width $height;
    }
  }
}
 
// Material Design Shadows (Size 1-5)

 @mixin shadow($level: 1) {
    @if $level == 1 {box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);} 
    @else if $level == 2 {box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);}
    @else if $level == 3 {box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);}
    @else if $level == 4 {box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);}
    @else if $level == 5 {box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);}
}
@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);
 
    @if $type == number {
    $query: "all" !default;

        @if $min != 0 and $max != 0 { 
          $query: "(min-width: #{$min}) and (max-width: #{$max})"; 
        }
        @else if $min != 0 and $max == 0 { 
          $query: "(min-width: #{$min})"; 
        }
        @else if $min == 0 and $max != 0 { 
          $query: "(max-width: #{$max})"; 
        }

        @media #{$query} { 
          @content;
        }
    }
}